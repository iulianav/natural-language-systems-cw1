in section one point one point eight we noted that a procedure used as an element in creating a more complex procedure could be regarded not only as a collection of particular operations but also as a procedural abstraction
that is the details of how the procedure was implemented could be suppressed and the particular procedure itself could be replaced by any other procedure with the same overall behavior
in other words we could make an abstraction that would separate the way the procedure would be used from the details of how the procedure would be implemented in terms of more primitive procedures
the analogous notion for compound data is called data abstraction
data abstraction is a methodology that enables us to isolate how a compound data object is used from the details of how it is constructed from more primitive data objects
the basic idea of data abstraction is to structure the programs that are to use compound data objects so that they operate on abstract data . that is our programs should use data in such a way as to make no assumptions about the data that are not strictly necessary for performing the task at hand
at the same time a concrete data representation is defined independent of the programs that use the data
the interface between these two parts of our system will be a set of procedures called selectors and constructors that implement the abstract data in terms of the concrete representation
to illustrate this technique we will consider how to design a set of procedures for manipulating rational numbers
suppose we want to do arithmetic with rational numbers
we want to be able to add subtract multiply and divide them and to test whether two rational numbers are equal
let us begin by assuming that we already have a way of constructing a rational number from a numerator and a denominator
we also assume that given a rational number we have a way of extracting its numerator and its denominator
let us further assume that the constructor and selectors are available as procedures
returns the rational number whose numerator is the integer < n > and whose denominator is the integer < d >
returns the numerator of the rational number < x >
returns the denominator of the rational number < x >
we are using here a powerful strategy of synthesis wishful thinking
we have n't yet said how a rational number is represented or how the procedures numer denom and make rat should be implemented
even so if we did have these three procedures we could then add subtract multiply divide and test equality by using the following relations
we can express these rules as procedures
now we have the operations on rational numbers defined in terms of the selector and constructor procedures numer denom and make rat
but we have n't yet defined these
what we need is some way to glue together a numerator and a denominator to form a rational number
to enable us to implement the concrete level of our data abstraction our language provides a compound structure called a pair which can be constructed with the primitive procedure cons
this procedure takes two arguments and returns a compound data object that contains the two arguments as parts
given a pair we can extract the parts using the primitive procedures car and cdr
thus we can use cons car and cdr as follows
notice that a pair is a data object that can be given a name and manipulated just like a primitive data object
moreover cons can be used to form pairs whose elements are pairs and so on
in section two point two we will see how this ability to combine pairs means that pairs can be used as general purpose building blocks to create all sorts of complex data structures
the single compound data primitive pair implemented by the procedures cons car and cdr is the only glue we need
data objects constructed from pairs are called list structured data
pairs offer a natural way to complete the rational number system
simply represent a rational number as a pair of two integers a numerator and a denominator
then make rat numer and denom are readily implemented as follows
also in order to display the results of our computations we can print rational numbers by printing the numerator a slash and the denominator
now we can try our rational number procedures
as the final example shows our rational number implementation does not reduce rational numbers to lowest terms
we can remedy this by changing make rat
if we have a gcd procedure like the one in section one point two point five that produces the greatest common divisor of two integers we can use gcd to reduce the numerator and the denominator to lowest terms before constructing the pair
now we have
as desired
this modification was accomplished by changing the constructor make rat without changing any of the procedures
that implement the actual operations
define a better version of make rat that handles both positive and negative arguments
make rat should normalize the sign so that if the rational number is positive both the numerator and denominator are positive and if the rational number is negative only the numerator is negative
before continuing with more examples of compound data and data abstraction let us consider some of the issues raised by the rational number example
we defined the rational number operations in terms of a constructor make rat and selectors numer and denom
in general the underlying idea of data abstraction is to identify for each type of data object a basic set of operations in terms of which all manipulations of data objects of that type will be expressed and then to use only those operations in manipulating the data
we can envision the structure of the rational number system as shown in figure two point one
the horizontal lines represent abstraction barriers that isolate different levels of the system
at each level the barrier separates the programs ( above ) that use the data abstraction from the programs ( below ) that implement the data abstraction
programs that use rational numbers manipulate them solely in terms of the procedures supplied for public use by the rational number package add rat sub rat mul rat div rat and equal rat
these in turn are implemented solely in terms of the constructor and selectors make rat numer and denom which themselves are implemented in terms of pairs
the details of how pairs are implemented are irrelevant to the rest of the rational number package so long as pairs can be manipulated by the use of cons car and cdr
in effect procedures at each level are the interfaces that define the abstraction barriers and connect the different levels
this simple idea has many advantages
one advantage is that it makes programs much easier to maintain and to modify
any complex data structure can be represented in a variety of ways with the primitive data structures provided by a programming language
of course the choice of representation influences the programs that operate on it thus if the representation were to be changed at some later time all such programs might have to be modified accordingly
this task could be time consuming and expensive in the case of large programs unless the dependence on the representation were to be confined by design to a very few program modules
for example an alternate way to address the problem of reducing rational numbers to lowest terms is to perform the reduction whenever we access the parts of a rational number rather than when we construct it
this leads to different constructor and selector procedures
the difference between this implementation and the previous one lies in when we compute the gcd
if in our typical use of rational numbers we access the numerators and denominators of the same rational numbers many times it would be preferable to compute the gcd when the rational numbers are constructed
if not we may be better off waiting until access time to compute the gcd
in any case when we change from one representation to the other the procedures add rat sub rat and so on do not have to be modified at all
constraining the dependence on the representation to a few interface procedures helps us design programs as well as modify them because it allows us to maintain the flexibility to consider alternate implementations
to continue with our simple example suppose we are designing a rational number package and we can't decide initially whether to perform the gcd at construction time or at selection time
the data abstraction methodology gives us a way to defer that decision without losing the ability to make progress on the rest of the system
consider the problem of representing line segments in a plane
each segment is represented as a pair of points a starting point and an ending point
define a constructor make segment and selectors start segment and end segment that define the representation of segments in terms of points
furthermore a point can be represented as a pair of numbers the x coordinate and the y coordinate
accordingly specify a constructor make point and selectors x point and y point that define this representation
finally using your selectors and constructors define a procedure midpoint segment that takes a line segment as argument and returns its midpoint
to try your procedures you'll need a way to print points
implement a representation for rectangles in a plane
in terms of your constructors and selectors create procedures that compute the perimeter and the area of a given rectangle
now implement a different representation for rectangles
can you design your system with suitable abstraction barriers so that the same perimeter and area procedures will work using either representation
we began the rational number implementation in section two point one point one by implementing the rational number operations add rat sub rat and so on in terms of three unspecified procedures make rat numer and denom
at that point we could think of the operations as being defined in terms of data objects numerators denominators and rational numbers whose behavior was specified by the latter three procedures
but exactly what is meant by data
it is not enough to say whatever is implemented by the given selectors and constructors . clearly not every arbitrary set of three procedures can serve as an appropriate basis for the rational number implementation
we need to guarantee that if we construct a rational number x from a pair of integers n and d then extracting the numer and the denom of x and dividing them should yield the same result as dividing n by d
in other words make rat numer and denom must satisfy the condition that for any integer n and any non zero integer d if x is then
in fact this is the only condition make rat numer and denom must fulfill in order to form a suitable basis for a rational number representation
in general we can think of data as defined by some collection of selectors and constructors together with specified conditions that these procedures must fulfill in order to be a valid representation
this point of view can serve to define not only high level data objects such as rational numbers but lower level objects as well
consider the notion of a pair which we used in order to define our rational numbers
we never actually said what a pair was only that the language supplied procedures cons car and cdr for operating on pairs
but the only thing we need to know about these three operations is that if we glue two objects together using cons we can retrieve the objects using car and cdr
that is the operations satisfy the condition that for any objects x and y if z is then is x and is y
indeed we mentioned that these three procedures are included as primitives in our language
however any triple of procedures that satisfies the above condition can be used as the basis for implementing pairs
this point is illustrated strikingly by the fact that we could implement cons car and cdr without using any data structures at all but only using procedures
here are the definitions
this use of procedures corresponds to nothing like our intuitive notion of what data should be
nevertheless all we need to do to show that this is a valid way to represent pairs is to verify that these procedures satisfy the condition given above
the subtle point to notice is that the value returned by is a procedure namely the internally defined procedure dispatch which takes one argument and returns either x or y depending on whether the argument is 0 or one
correspondingly is defined to apply z to 0
hence if z is the procedure formed by then z applied to 0 will yield x
thus we have shown that yields x as desired
similarly applies the procedure returned by to one which returns y
therefore this procedural implementation of pairs is a valid implementation and if we access pairs using only cons car and cdr we cannot distinguish this implementation from one that uses real data structures
the point of exhibiting the procedural representation of pairs is not that our language works this way but that it could work this way
the procedural representation although obscure is a perfectly adequate way to represent pairs since it fulfills the only conditions that pairs need to fulfill
this example also demonstrates that the ability to manipulate procedures as objects automatically provides the ability to represent compound data
this may seem a curiosity now but procedural representations of data will play a central role in our programming repertoire
this style of programming is often called message passing and we will be using it as a basic tool in chapter three when we address the issues of modeling and simulation
here is an alternative procedural representation of pairs
for this representation verify that yields x for any objects x and y
what is the corresponding definition of cdr
show that we can represent pairs of nonnegative integers using only numbers and arithmetic operations if we represent the pair a and b as the integer that is the product 2a 3b
give the corresponding definitions of the procedures cons car and cdr
in case representing pairs as procedures was n't mind boggling enough consider that in a language that can manipulate procedures we can get by without numbers by implementing 0 and the operation of adding one as
this representation is known as church numerals after its inventor alonzo church the logician who invented the calculus
define one and two directly
give a direct definition of the addition procedure plus
alyssa p
hacker is designing a system to help people solve engineering problems
one feature she wants to provide in her system is the ability to manipulate inexact quantities with known precision so that when computations are done with such approximate quantities the results will be numbers of known precision
electrical engineers will be using alyssa's system to compute electrical quantities
it is sometimes necessary for them to compute the value of a parallel equivalent resistance rp of two resistors r one and r two using the formula
resistance values are usually known only up to some tolerance guaranteed by the manufacturer of the resistor
for example if you buy a resistor labeled 6.8 ohms with 10% tolerance you can only be sure that the resistor has a resistance between 6.8 minus 0.68 equal 6.12 and 6.8 plus 0.68 equal 7.48 ohms
thus if you have a 6.8 ohm 10% resistor in parallel with a 4.7 ohm 5% resistor the resistance of the combination can range from about 2.58 ohms to about 2.97 ohms
alyssa's idea is to implement interval arithmetic as a set of arithmetic operations for combining intervals
the result of adding subtracting multiplying or dividing two intervals is itself an interval representing the range of the result
alyssa postulates the existence of an abstract object called an interval that has two endpoints a lower bound and an upper bound
she also presumes that given the endpoints of an interval she can construct the interval using the data constructor make interval
alyssa first writes a procedure for adding two intervals
she reasons that the minimum value the sum could be is the sum of the two lower bounds and the maximum value it could be is the sum of the two upper bounds
alyssa also works out the product of two intervals by finding the minimum and the maximum of the products of the bounds and using them as the bounds of the resulting interval
to divide two intervals alyssa multiplies the first by the reciprocal of the second
note that the bounds of the reciprocal interval are the reciprocal of the upper bound and the reciprocal of the lower bound in that order
alyssa's program is incomplete because she has not specified the implementation of the interval abstraction
here is a definition of the interval constructor
define selectors upper bound and lower bound to complete the implementation
using reasoning analogous to alyssa's describe how the difference of two intervals may be computed
define a corresponding subtraction procedure called sub interval
the width of an interval is half of the difference between its upper and lower bounds
the width is a measure of the uncertainty of the number specified by the interval
for some arithmetic operations the width of the result of combining two intervals is a function only of the widths of the argument intervals whereas for others the width of the combination is not a function of the widths of the argument intervals
show that the width of the sum of two intervals is a function only of the widths of the intervals being added
give examples to show that this is not true for multiplication or division
ben bitdiddle an expert systems programmer looks over alyssa's shoulder and comments that it is not clear what it means to divide by an interval that spans zero
modify alyssa's code to check for this condition and to signal an error if it occurs
in passing ben also cryptically comments by testing the signs of the endpoints of the intervals it is possible to break mul interval into nine cases only one of which requires more than two multiplications . rewrite this procedure using ben's suggestion
after debugging her program alyssa shows it to a potential user who complains that her program solves the wrong problem
he wants a program that can deal with numbers represented as a center value and an additive tolerance for example he wants to work with intervals such as 3.5&plusmn 0.15 rather than [3.35 3.65]
alyssa returns to her desk and fixes this problem by supplying an alternate constructor and alternate selectors
unfortunately most of alyssa's users are engineers
real engineering situations usually involve measurements with only a small uncertainty measured as the ratio of the width of the interval to the midpoint of the interval
engineers usually specify percentage tolerances on the parameters of devices as in the resistor specifications given earlier
define a constructor make center percent that takes a center and a percentage tolerance and produces the desired interval
you must also define a selector percent that produces the percentage tolerance for a given interval
the center selector is the same as the one shown above
show that under the assumption of small percentage tolerances there is a simple formula for the approximate percentage tolerance of the product of two intervals in terms of the tolerances of the factors
you may simplify the problem by assuming that all numbers are positive
after considerable work alyssa p
hacker delivers her finished system
several years later after she has forgotten all about it she gets a frenzied call from an irate user lem e
tweakit
it seems that lem has noticed that the formula for parallel resistors can be written in two algebraically equivalent ways
and
he has written the following two programs each of which computes the parallel resistors formula differently
lem complains that alyssa's program gives different answers for the two ways of computing
this is a serious complaint
demonstrate that lem is right
investigate the behavior of the system on a variety of arithmetic expressions
make some intervals a and b and use them in computing the expressions a / a and a / b
you will get the most insight by using intervals whose width is a small percentage of the center value
examine the results of the computation in center percent form
eva lu ator another user has also noticed the different intervals computed by different but algebraically equivalent expressions
she says that a formula to compute with intervals using alyssa's system will produce tighter error bounds if it can be written in such a form that no variable that represents an uncertain number is repeated
thus she says par two is a better program for parallel resistances than par one
is she right
why
explain in general why equivalent algebraic expressions may lead to different answers
can you devise an interval arithmetic package that does not have this shortcoming or is this task impossible
