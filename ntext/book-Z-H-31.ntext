to design a register machine we must design its data paths and the controller that sequences these operations
to illustrate the design of a simple register machine let us examine euclid's algorithm which is used to compute the greatest common divisor ( gcd ) of two integers
as we saw in section one point two point five euclid's algorithm can be carried out by an iterative process as specified by the following procedure
a machine to carry out this algorithm must keep track of two numbers a and b so let us assume that these numbers are stored in two registers with those names
the basic operations required are testing whether the contents of register b is zero and computing the remainder of the contents of register a divided by the contents of register b
the remainder operation is a complex process but assume for the moment that we have a primitive device that computes remainders
on each cycle of the gcd algorithm the contents of register a must be replaced by the contents of register b and the contents of b must be replaced by the remainder of the old contents of a divided by the old contents of b
it would be convenient if these replacements could be done simultaneously but in our model of register machines we will assume that only one register can be assigned a new value at each step
to accomplish the replacements our machine will use a third temporary register which we call t
we can illustrate the registers and operations required for this machine by using the data path diagram shown in figure five point one
in this diagram the registers are represented by rectangles
each way to assign a value to a register is indicated by an arrow with an x behind the head pointing from the source of data to the register
we can think of the x as a button that when pushed allows the value at the source to flow into the designated register
the label next to each button is the name we will use to refer to the button
the names are arbitrary and can be chosen to have mnemonic value
the source of data for a register can be another register an operation result or a constant
an operation that computes a value from constants and the contents of registers is represented in a data path diagram by a trapezoid containing a name for the operation
for example the box marked rem in figure five point one represents an operation that computes the remainder of the contents of the registers a and b to which it is attached
arrows point from the input registers and constants to the box and arrows connect the operation's output value to registers
a test is represented by a circle containing a name for the test
for example our gcd machine has an operation that tests whether the contents of register b is zero
a test also has arrows from its input registers and constants but it has no output arrows its value is used by the controller rather than by the data paths
overall the data path diagram shows the registers and operations that are required for the machine and how they must be connected
if we view the arrows as wires and the x buttons as switches the data path diagram is very like the wiring diagram for a machine that could be constructed from electrical components
in order for the data paths to actually compute gcds the buttons must be pushed in the correct sequence
we will describe this sequence in terms of a controller diagram as illustrated in figure five point two
the elements of the controller diagram indicate how the data path components should be operated
the rectangular boxes in the controller diagram identify data path buttons to be pushed and the arrows describe the sequencing from one step to the next
the diamond in the diagram represents a decision
one of the two sequencing arrows will be followed depending on the value of the data path test identified in the diamond
we can interpret the controller in terms of a physical analogy think of the diagram as a maze in which a marble is rolling
when the marble rolls into a box it pushes the data path button that is named by the box
when the marble rolls into a decision node it leaves the node on the path determined by the result of the indicated test
taken together the data paths and the controller completely describe a machine for computing gcds
we start the controller at the place marked start after placing numbers in registers a and b
when the controller reaches done we will find the value of the gcd in register a
design a register machine to compute factorials using the iterative algorithm specified by the following procedure
draw data path and controller diagrams for this machine
data path and controller diagrams are adequate for representing simple machines such as gcd but they are unwieldy for describing large machines such as a lisp interpreter
to make it possible to deal with complex machines we will create a language that presents in textual form all the information given by the data path and controller diagrams
we will start with a notation that directly mirrors the diagrams
we define the data paths of a machine by describing the registers and the operations
to describe a register we give it a name and specify the buttons that control assignment to it
we give each of these buttons a name and specify the source of the data that enters the register under the button's control
to describe an operation we give it a name and specify its inputs
we define the controller of a machine as a sequence of instructions together with labels that identify entry points in the sequence
an instruction is one of the following
the name of a data path button to push to assign a value to a register
a test instruction that performs a specified test
a conditional branch to a location indicated by a controller label based on the result of the previous test
if the test is false the controller should continue with the next instruction in the sequence
otherwise the controller should continue with the instruction after the label
an unconditional branch naming a controller label at which to continue execution
the machine starts at the beginning of the controller instruction sequence and stops when execution reaches the end of the sequence
except when a branch changes the flow of control instructions are executed in the order in which they are listed
figure five point three shows the gcd machine described in this way
this example only hints at the generality of these descriptions since the gcd machine is a very simple case each register has only one button and each button and test is used only once in the controller
unfortunately it is difficult to read such a description
in order to understand the controller instructions we must constantly refer back to the definitions of the button names and the operation names and to understand what the buttons do we may have to refer to the definitions of the operation names
we will thus transform our notation to combine the information from the data path and controller descriptions so that we see it all together
to obtain this form of description we will replace the arbitrary button and operation names by the definitions of their behavior
that is instead of saying push button <t r and separately saying button <t r assigns the value of the rem operation to register t and the rem operation's inputs are the contents of registers a and b we will say push the button that assigns to register t the value of the rem operation on the contents of registers a and b . similarly instead of saying perform the equal test and separately saying the equal test operates on the contents of register b and the constant 0 we will say perform the equal test on the contents of register b and the constant 0 . we will omit the data path description leaving only the controller sequence
thus the gcd machine is described as follows
this form of description is easier to read than the kind illustrated in figure five point three but it also has disadvantages
it is more verbose for large machines because complete descriptions of the data path elements are repeated whenever the elements are mentioned in the controller instruction sequence
moreover repeating the data path descriptions obscures the actual data path structure of the machine it is not obvious for a large machine how many registers operations and buttons there are and how they are interconnected
because the controller instructions in a machine definition look like lisp expressions it is easy to forget that they are not arbitrary lisp expressions
they can notate only legal machine operations
for example operations can operate directly only on constants and the contents of registers not on the results of other operations
in spite of these disadvantages we will use this register machine language throughout this chapter because we will be more concerned with understanding controllers than with understanding the elements and connections in data paths
we should keep in mind however that data path design is crucial in designing real machines
use the register machine language to describe the iterative factorial machine of exercise five point one
let us modify the gcd machine so that we can type in the numbers whose gcd we want and get the answer printed at our terminal
we will not discuss how to make a machine that can read and print but will assume that they are available as primitive operations
read is like the operations we have been using in that it produces a value that can be stored in a register
but read does not take inputs from any registers its value depends on something that happens outside the parts of the machine we are designing
we will allow our machine's operations to have such behavior and thus will draw and notate the use of read just as we do any other operation that computes a value
print on the other hand differs from the operations we have been using in a fundamental way it does not produce an output value to be stored in a register
though it has an effect this effect is not on a part of the machine we are designing
we will refer to this kind of operation as an action
we will represent an action in a data path diagram just as we represent an operation that computes a value as a trapezoid that contains the name of the action
arrows point to the action box from any inputs
we also associate a button with the action
pushing the button makes the action happen
to make a controller push an action button we use a new kind of instruction called perform
thus the action of printing the contents of register a is represented in a controller sequence by the instruction
figure five point four shows the data paths and controller for the new gcd machine
instead of having the machine stop after printing the answer we have made it start over so that it repeatedly reads a pair of numbers computes their gcd and prints the result
this structure is like the driver loops we used in the interpreters of chapter four
we will often define a machine to include primitive operations that are actually very complex
for example in sections five point four and five point five we will treat scheme's environment manipulations as primitive
such abstraction is valuable because it allows us to ignore the details of parts of a machine so that we can concentrate on other aspects of the design
the fact that we have swept a lot of complexity under the rug however does not mean that a machine design is unrealistic
we can always replace the complex primitives by simpler primitive operations
consider the gcd machine
the machine has an instruction that computes the remainder of the contents of registers a and b and assigns the result to register t
if we want to construct the gcd machine without using a primitive remainder operation we must specify how to compute remainders in terms of simpler operations such as subtraction
indeed we can write a scheme procedure that finds remainders in this way
we can thus replace the remainder operation in the gcd machine's data paths with a subtraction operation and a comparison test
figure five point five shows the data paths and controller for the elaborated machine
the instruction
in the gcd controller definition is replaced by a sequence of instructions that contains a loop as shown in figure five point six
design a machine to compute square roots using newton's method as described in section one point one point seven
begin by assuming that good enough and improve operations are available as primitives
then show how to expand these in terms of arithmetic operations
describe each version of the sqrt machine design by drawing a data path diagram and writing a controller definition in the register machine language
when designing a machine to perform a computation we would often prefer to arrange for components to be shared by different parts of the computation rather than duplicate the components
consider a machine that includes two gcd computations one that finds the gcd of the contents of registers a and b and one that finds the gcd of the contents of registers c and d
we might start by assuming we have a primitive gcd operation then expand the two instances of gcd in terms of more primitive operations
figure five point seven shows just the gcd portions of the resulting machine's data paths without showing how they connect to the rest of the machine
the figure also shows the corresponding portions of the machine's controller sequence
this machine has two remainder operation boxes and two boxes for testing equality
if the duplicated components are complicated as is the remainder box this will not be an economical way to build the machine
we can avoid duplicating the data path components by using the same components for both gcd computations provided that doing so will not affect the rest of the larger machine's computation
if the values in registers a and b are not needed by the time the controller gets to gcd two we can change the machine so that it uses registers a and b rather than registers c and d in computing the second gcd as well as the first
if we do this we obtain the controller sequence shown in figure five point eight
we have removed the duplicate data path components but the controller now has two gcd sequences that differ only in their entry point labels
it would be better to replace these two sequences by branches to a single sequence a gcd subroutine at the end of which we branch back to the correct place in the main instruction sequence
we can accomplish this as follows before branching to gcd we place a distinguishing value into a special register continue
at the end of the gcd subroutine we return either to after gcd one or to after gcd two depending on the value of the continue register
figure five point nine shows the relevant portion of the resulting controller sequence which includes only a single copy of the gcd instructions
this is a reasonable approach for handling small problems but it would be awkward if there were many instances of gcd computations in the controller sequence
to decide where to continue executing after the gcd subroutine we would need tests in the data paths and branch instructions in the controller for all the places that use gcd
a more powerful method for implementing subroutines is to have the continue register hold the label of the entry point in the controller sequence at which execution should continue when the subroutine is finished
implementing this strategy requires a new kind of connection between the data paths and the controller of a register machine there must be a way to assign to a register a label in the controller sequence in such a way that this value can be fetched from the register and used to continue execution at the designated entry point
to reflect this ability we will extend the assign instruction of the register machine language to allow a register to be assigned as value a label from the controller sequence
we will also extend the goto instruction to allow execution to continue at the entry point described by the contents of a register rather than only at an entry point described by a constant label
using these new constructs we can terminate the gcd subroutine with a branch to the location stored in the continue register
this leads to the controller sequence shown in figure five point ten
a machine with more than one subroutine could use multiple continuation registers or we could have all subroutines share a single continue register
sharing is more economical but we must be careful if we have a subroutine that calls another subroutine
unless sub one saves the contents of continue in some other register before setting up continue for the call to sub two sub one will not know where to go when it is finished
the mechanism developed in the next section to handle recursion also provides a better solution to this problem of nested subroutine calls
with the ideas illustrated so far we can implement any iterative process by specifying a register machine that has a register corresponding to each state variable of the process
the machine repeatedly executes a controller loop changing the contents of the registers until some termination condition is satisfied
at each point in the controller sequence the state of the machine is completely determined by the contents of the registers
implementing recursive processes however requires an additional mechanism
consider the following recursive method for computing factorials which we first examined in section one point two point one
as we see from the procedure computing n requires computing
our gcd machine modeled on the procedure
similarly had to compute another gcd
but there is an important difference between the gcd procedure which reduces the original computation to a new gcd computation and factorial which requires computing another factorial as a subproblem
in gcd the answer to the new gcd computation is the answer to the original problem
to compute the next gcd we simply place the new arguments in the input registers of the gcd machine and reuse the machine's data paths by executing the same controller sequence
when the machine is finished solving the final gcd problem it has completed the entire computation
in the case of factorial the answer to the new factorial subproblem is not the answer to the original problem
the value obtained for must be multiplied by n to get the final answer
if we try to imitate the gcd design and solve the factorial subproblem by decrementing the n register and rerunning the factorial machine we will no longer have available the old value of n by which to multiply the result
we thus need a second factorial machine to work on the subproblem
this second factorial computation itself has a factorial subproblem which requires a third factorial machine and so on
since each factorial machine contains another factorial machine within it the total machine contains an infinite nest of similar machines and hence cannot be constructed from a fixed finite number of parts
nevertheless we can implement the factorial process as a register machine if we can arrange to use the same components for each nested instance of the machine
specifically the machine that computes n should use the same components to work on the subproblem of computing on the subproblem for and so on
this is plausible because although the factorial process dictates that an unbounded number of copies of the same machine are needed to perform a computation only one of these copies needs to be active at any given time
when the machine encounters a recursive subproblem it can suspend work on the main problem reuse the same physical parts to work on the subproblem then continue the suspended computation
in the subproblem the contents of the registers will be different than they were in the main problem
in order to be able to continue the suspended computation the machine must save the contents of any registers that will be needed after the subproblem is solved so that these can be restored to continue the suspended computation
in the case of factorial we will save the old value of n to be restored when we are finished computing the factorial of the decremented n register
since there is no a priori limit on the depth of nested recursive calls we may need to save an arbitrary number of register values
these values must be restored in the reverse of the order in which they were saved since in a nest of recursions the last subproblem to be entered is the first to be finished
this dictates the use of a stack or last in first out data structure to save register values
we can extend the register machine language to include a stack by adding two kinds of instructions values are placed on the stack using a save instruction and restored from the stack using a restore instruction
after a sequence of values has been save d on the stack a sequence of restore s will retrieve these values in reverse order
with the aid of the stack we can reuse a single copy of the factorial machine's data paths for each factorial subproblem
there is a similar design issue in reusing the controller sequence that operates the data paths
to reexecute the factorial computation the controller cannot simply loop back to the beginning as with an iterative process because after solving the subproblem the machine must still multiply the result by n
the controller must suspend its computation of n solve the subproblem then continue its computation of n
this view of the factorial computation suggests the use of the subroutine mechanism described in section five point one point three which has the controller use a continue register to transfer to the part of the sequence that solves a subproblem and then continue where it left off on the main problem
we can thus make a factorial subroutine that returns to the entry point stored in the continue register
around each subroutine call we save and restore continue just as we do the n register since each level of the factorial computation will use the same continue register
that is the factorial subroutine must put a new value in continue when it calls itself for a subproblem but it will need the old value in order to return to the place that called it to solve a subproblem
figure five point eleven shows the data paths and controller for a machine that implements the recursive factorial procedure
the machine has a stack and three registers called n val and continue
to simplify the data path diagram we have not named the register assignment buttons only the stack operation buttons
to operate the machine we put in register n the number whose factorial we wish to compute and start the machine
when the machine reaches fact done the computation is finished and the answer will be found in the val register
in the controller sequence n and continue are saved before each recursive call and restored upon return from the call
returning from a call is accomplished by branching to the location stored in continue
continue is initialized when the machine starts so that the last return will go to fact done
the val register which holds the result of the factorial computation is not saved before the recursive call because the old contents of val is not useful after the subroutine returns
only the new value which is the value produced by the subcomputation is needed
although in principle the factorial computation requires an infinite machine the machine in figure five point eleven is actually finite except for the stack which is potentially unbounded
any particular physical implementation of a stack however will be of finite size and this will limit the depth of recursive calls that can be handled by the machine
this implementation of factorial illustrates the general strategy for realizing recursive algorithms as ordinary register machines augmented by stacks
when a recursive subproblem is encountered we save on the stack the registers whose current values will be required after the subproblem is solved solve the recursive subproblem then restore the saved registers and continue execution on the main problem
the continue register must always be saved
whether there are other registers that need to be saved depends on the particular machine since not all recursive computations need the original values of registers that are modified during solution of the subproblem
let us examine a more complex recursive process the tree recursive computation of the fibonacci numbers which we introduced in section one point two point two
just as with factorial we can implement the recursive fibonacci computation as a register machine with registers n val and continue
the machine is more complex than the one for factorial because there are two places in the controller sequence where we need to perform recursive calls once to compute fib and once to compute fib
to set up for each of these calls we save the registers whose values will be needed later set the n register to the number whose fib we need to compute recursively and assign to continue the entry point in the main sequence to which to return
we then go to fib loop
when we return from the recursive call the answer is in val
figure five point twelve shows the controller sequence for this machine
specify register machines that implement each of the following procedures
for each machine write a controller instruction sequence and draw a diagram showing the data paths
a
recursive exponentiation
b
iterative exponentiation
hand simulate the factorial and fibonacci machines using some nontrivial input
show the contents of the stack at each significant point in the execution
ben bitdiddle observes that the fibonacci machine's controller sequence has an extra save and an extra restore which can be removed to make a faster machine
where are these instructions
a controller instruction in our register machine language has one of the following forms where each inputi is either or
these instructions were introduced in section five point one point one
the use of registers to hold labels was introduced in section five point one point three
instructions to use the stack were introduced in section five point one point four
the only kind of constant value we have seen so far is a number but later we will use strings symbols and lists
for example is the string "abc" is the symbol abc is the list and is the empty list
