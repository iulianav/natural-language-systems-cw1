in this section we extend the scheme evaluator to support a programming paradigm called nondeterministic computing by building into the evaluator a facility to support automatic search
this is a much more profound change to the language than the introduction of lazy evaluation in section four point two
nondeterministic computing like stream processing is useful for generate and test applications
consider the task of starting with two lists of positive integers and finding a pair of integers one from the first list and one from the second list whose sum is prime
we saw how to handle this with finite sequence operations in section two point two point three and with infinite streams in section three point five point three
our approach was to generate the sequence of all possible pairs and filter these to select the pairs whose sum is prime
whether we actually generate the entire sequence of pairs first as in chapter two or interleave the generating and filtering as in chapter three is immaterial to the essential image of how the computation is organized
the nondeterministic approach evokes a different image
imagine simply that we choose a number from the first list and a number from the second list and require that their sum be prime
this is expressed by following procedure
it might seem as if this procedure merely restates the problem rather than specifying a way to solve it
nevertheless this is a legitimate nondeterministic program
the key idea here is that expressions in a nondeterministic language can have more than one possible value
for instance an element of might return any element of the given list
our nondeterministic program evaluator will work by automatically choosing a possible value and keeping track of the choice
if a subsequent requirement is not met the evaluator will try a different choice and it will keep trying new choices until the evaluation succeeds or until we run out of choices
just as the lazy evaluator freed the programmer from the details of how values are delayed and forced the nondeterministic program evaluator will free the programmer from the details of how choices are made
it is instructive to contrast the different images of time evoked by nondeterministic evaluation and stream processing
stream processing uses lazy evaluation to decouple the time when the stream of possible answers is assembled from the time when the actual stream elements are produced
the evaluator supports the illusion that all the possible answers are laid out before us in a timeless sequence
with nondeterministic evaluation an expression represents the exploration of a set of possible worlds each determined by a set of choices
some of the possible worlds lead to dead ends while others have useful values
the nondeterministic program evaluator supports the illusion that time branches and that our programs have different possible execution histories
when we reach a dead end we can revisit a previous choice point and proceed along a different branch
the nondeterministic program evaluator implemented below is called the amb evaluator because it is based on a new special form called amb
we can type the above definition of prime sum pair at the amb evaluator driver loop and run the procedure as follows
the value returned was obtained after the evaluator repeatedly chose elements from each of the lists until a successful choice was made
section four point three point one introduces amb and explains how it supports nondeterminism through the evaluator's automatic search mechanism
section four point three point two presents examples of nondeterministic programs and section four point three point three gives the details of how to implement the amb evaluator by modifying the ordinary scheme evaluator
to extend scheme to support nondeterminism we introduce a new special form called amb
the expression returns the value of one of the n expressions ei ambiguously . for example the expression
can have six possible values
amb with a single choice produces an ordinary ( single ) value
amb with no choices the expression is an expression with no acceptable values
operationally we can think of as an expression that when evaluated causes the computation to fail the computation aborts and no value is produced
using this idea we can express the requirement that a particular predicate expression p must be true as follows
with amb and require we can implement the an element of procedure used above
an element of fails if the list is empty
otherwise it ambiguously returns either the first element of the list or an element chosen from the rest of the list
we can also express infinite ranges of choices
the following procedure potentially returns any integer greater than or equal to some given n
this is like the stream procedure integers starting from described in section three point five point two but with an important difference the stream procedure returns an object that represents the sequence of all integers beginning with n whereas the amb procedure returns a single integer
abstractly we can imagine that evaluating an amb expression causes time to split into branches where the computation continues on each branch with one of the possible values of the expression
we say that amb represents a nondeterministic choice point
if we had a machine with a sufficient number of processors that could be dynamically allocated we could implement the search in a straightforward way
execution would proceed as in a sequential machine until an amb expression is encountered
at this point more processors would be allocated and initialized to continue all of the parallel executions implied by the choice
each processor would proceed sequentially as if it were the only choice until it either terminates by encountering a failure or it further subdivides or it finishes
on the other hand if we have a machine that can execute only one process we must consider the alternatives sequentially
one could imagine modifying an evaluator to pick at random a branch to follow whenever it encounters a choice point
random choice however can easily lead to failing values
we might try running the evaluator over and over making random choices and hoping to find a non failing value but it is better to systematically search all possible execution paths
the amb evaluator that we will develop and work with in this section implements a systematic search as follows when the evaluator encounters an application of amb it initially selects the first alternative
this selection may itself lead to a further choice
the evaluator will always initially choose the first alternative at each choice point
if a choice results in a failure then the evaluator automagically backtracks to the most recent choice point and tries the next alternative
if it runs out of alternatives at any choice point the evaluator will back up to the previous choice point and resume from there
this process leads to a search strategy known as depth first search or chronological backtracking
the driver loop for the amb evaluator has some unusual properties
it reads an expression and prints the value of the first non failing execution as in the prime sum pair example shown above
if we want to see the value of the next successful execution we can ask the interpreter to backtrack and attempt to generate a second non failing execution
this is signaled by typing the symbol try again
if any expression except try again is given the interpreter will start a new problem discarding the unexplored alternatives in the previous problem
here is a sample interaction
write a procedure an integer between that returns an integer between two given bounds
this can be used to implement a procedure that finds pythagorean triples i.e. triples of integers ( i j k ) between the given bounds such that i < j and i two plus j two equal k two as follows
exercise three point sixty nine discussed how to generate the stream of all pythagorean triples with no upper bound on the size of the integers to be searched
explain why simply replacing an integer between by an integer starting from in the procedure in exercise four point thirty five is not an adequate way to generate arbitrary pythagorean triples
write a procedure that actually will accomplish this
ben bitdiddle claims that the following method for generating pythagorean triples is more efficient than the one in exercise four point thirty five
is he correct
section four point three point three describes the implementation of the amb evaluator
first however we give some examples of how it can be used
the advantage of nondeterministic programming is that we can suppress the details of how search is carried out thereby expressing our programs at a higher level of abstraction
the following puzzle is typical of a large class of simple logic puzzles
baker cooper fletcher miller and smith live on different floors of an apartment house that contains only five floors
baker does not live on the top floor
cooper does not live on the bottom floor
fletcher does not live on either the top or the bottom floor
miller lives on a higher floor than does cooper
smith does not live on a floor adjacent to fletcher's
fletcher does not live on a floor adjacent to cooper's
where does everyone live
we can determine who lives on each floor in a straightforward way by enumerating all the possibilities and imposing the given restrictions
evaluating the expression produces the result
although this simple procedure works it is very slow
exercises four point thirty nine and four point forty discuss some possible improvements
modify the multiple dwelling procedure to omit the requirement that smith and fletcher do not live on adjacent floors
how many solutions are there to this modified puzzle
does the order of the restrictions in the multiple dwelling procedure affect the answer
does it affect the time to find an answer
if you think it matters demonstrate a faster program obtained from the given one by reordering the restrictions
if you think it does not matter argue your case
in the multiple dwelling problem how many sets of assignments are there of people to floors both before and after the requirement that floor assignments be distinct
it is very inefficient to generate all possible assignments of people to floors and then leave it to backtracking to eliminate them
for example most of the restrictions depend on only one or two of the person floor variables and can thus be imposed before floors have been selected for all the people
write and demonstrate a much more efficient nondeterministic procedure that solves this problem based upon generating only those possibilities that are not already ruled out by previous restrictions
write an ordinary scheme program to solve the multiple dwelling puzzle
solve the following liars puzzle
five schoolgirls sat for an examination
their parents so they thought showed an undue degree of interest in the result
they therefore agreed that in writing home about the examination each girl should make one true statement and one untrue one
the following are the relevant passages from their letters
betty kitty was second in the examination
i was only third . ethel you'll be glad to hear that i was on top
joan was second . joan i was third and poor old ethel was bottom . kitty i came out second
mary was only fourth . mary i was fourth
top place was taken by betty
what in fact was the order in which the five girls were placed
use the amb evaluator to solve the following puzzle
mary ann moore's father has a yacht and so has each of his four friends colonel downing mr
hall sir barnacle hood and dr
parker
each of the five also has one daughter and each has named his yacht after a daughter of one of the others
sir barnacle's yacht is the gabrielle mr
moore owns the lorna mr
hall the rosalind
the melissa owned by colonel downing is named after sir barnacle's daughter
gabrielle's father owns the yacht that is named after dr
parker's daughter
who is lorna's father
try to write the program so that it runs efficiently
also determine how many solutions there are if we are not told that mary ann's last name is moore
exercise two point forty two described the eight queens puzzle of placing queens on a chessboard so that no two attack each other
write a nondeterministic program to solve this puzzle
programs designed to accept natural language as input usually start by attempting to parse the input that is to match the input against some grammatical structure
for example we might try to recognize simple sentences consisting of an article followed by a noun followed by a verb such as the cat eats . to accomplish such an analysis we must be able to identify the parts of speech of individual words
we could start with some lists that classify various words
we also need a grammar that is a set of rules describing how grammatical elements are composed from simpler elements
a very simple grammar might stipulate that a sentence always consists of two pieces a noun phrase followed by a verb and that a noun phrase consists of an article followed by a noun
with this grammar the sentence the cat eats is parsed as follows
we can generate such a parse with a simple program that has separate procedures for each of the grammatical rules
to parse a sentence we identify its two constituent pieces and return a list of these two elements tagged with the symbol sentence
a noun phrase similarly is parsed by finding an article followed by a noun
at the lowest level parsing boils down to repeatedly checking that the next unparsed word is a member of the list of words for the required part of speech
to implement this we maintain a global variable unparsed which is the input that has not yet been parsed
each time we check a word we require that unparsed must be non empty and that it should begin with a word from the designated list
if so we remove that word from unparsed and return the word together with its part of speech
to start the parsing all we need to do is set unparsed to be the entire input try to parse a sentence and check that nothing is left over
we can now try the parser and verify that it works for our simple test sentence
the amb evaluator is useful here because it is convenient to express the parsing constraints with the aid of require
automatic search and backtracking really pay off however when we consider more complex grammars where there are choices for how the units can be decomposed
let's add to our grammar a list of prepositions
and define a prepositional phrase to be a preposition followed by a noun phrase
now we can define a sentence to be a noun phrase followed by a verb phrase where a verb phrase can be either a verb or a verb phrase extended by a prepositional phrase
while we're at it we can also elaborate the definition of noun phrases to permit such things as a cat in the class . what we used to call a noun phrase we'll now call a simple noun phrase and a noun phrase will now be either a simple noun phrase or a noun phrase extended by a prepositional phrase
our new grammar lets us parse more complex sentences
for example
produces
observe that a given input may have more than one legal parse
in the sentence the professor lectures to the student with the cat it may be that the professor is lecturing with the cat or that the student has the cat
our nondeterministic program finds both possibilities
produces
asking the evaluator to try again yields
with the grammar given above the following sentence can be parsed in five different ways the professor lectures to the student in the class with the cat . give the five parses and explain the differences in shades of meaning among them
the evaluators in sections four point one and four point two do not determine what order operands are evaluated in
we will see that the amb evaluator evaluates them from left to right
explain why our parsing program would n't work if the operands were evaluated in some other order
louis reasoner suggests that since a verb phrase is either a verb or a verb phrase followed by a prepositional phrase it would be much more straightforward to define the procedure parse verb phrase as follows
does this work
does the program's behavior change if we interchange the order of expressions in the amb
extend the grammar given above to handle more complex sentences
for example you could extend noun phrases and verb phrases to include adjectives and adverbs or you could handle compound sentences
alyssa p
hacker is more interested in generating interesting sentences than in parsing them
she reasons that by simply changing the procedure parse word so that it ignores the input sentence and instead always succeeds and generates an appropriate word we can use the programs we had built for parsing to do generation instead
implement alyssa's idea and show the first half dozen or so sentences generated
the evaluation of an ordinary scheme expression may return a value may never terminate or may signal an error
in nondeterministic scheme the evaluation of an expression may in addition result in the discovery of a dead end in which case evaluation must backtrack to a previous choice point
the interpretation of nondeterministic scheme is complicated by this extra case
we will construct the amb evaluator for nondeterministic scheme by modifying the analyzing evaluator of section four point one point seven
as in the analyzing evaluator evaluation of an expression is accomplished by calling an execution procedure produced by analysis of that expression
the difference between the interpretation of ordinary scheme and the interpretation of nondeterministic scheme will be entirely in the execution procedures
recall that the execution procedures for the ordinary evaluator take one argument the environment of execution
in contrast the execution procedures in the amb evaluator take three arguments the environment and two procedures called continuation procedures
the evaluation of an expression will finish by calling one of these two continuations if the evaluation results in a value the success continuation is called with that value if the evaluation results in the discovery of a dead end the failure continuation is called
constructing and calling appropriate continuations is the mechanism by which the nondeterministic evaluator implements backtracking
it is the job of the success continuation to receive a value and proceed with the computation
along with that value the success continuation is passed another failure continuation which is to be called subsequently if the use of that value leads to a dead end
it is the job of the failure continuation to try another branch of the nondeterministic process
the essence of the nondeterministic language is in the fact that expressions may represent choices among alternatives
the evaluation of such an expression must proceed with one of the indicated alternative choices even though it is not known in advance which choices will lead to acceptable results
to deal with this the evaluator picks one of the alternatives and passes this value to the success continuation
together with this value the evaluator constructs and passes along a failure continuation that can be called later to choose a different alternative
a failure is triggered during evaluation when a user program explicitly rejects the current line of attack
the failure continuation in hand at that point will cause the most recent choice point to choose another alternative
if there are no more alternatives to be considered at that choice point a failure at an earlier choice point is triggered and so on
failure continuations are also invoked by the driver loop in response to a try again request to find another value of the expression
in addition if a side effect operation occurs on a branch of the process resulting from a choice it may be necessary when the process finds a dead end to undo the side effect before making a new choice
this is accomplished by having the side effect operation produce a failure continuation that undoes the side effect and propagates the failure
in summary failure continuations are constructed by
amb expressions to provide a mechanism to make alternative choices if the current choice made by the amb expression leads to a dead end
the top level driver to provide a mechanism to report failure when the choices are exhausted
assignments to intercept failures and undo assignments during backtracking
failures are initiated only when a dead end is encountered
this occurs
if the user program executes
if the user types try again at the top level driver
failure continuations are also called during processing of a failure
when the failure continuation created by an assignment finishes undoing a side effect it calls the failure continuation it intercepted in order to propagate the failure back to the choice point that led to this assignment or to the top level
when the failure continuation for an amb runs out of choices it calls the failure continuation that was originally given to the amb in order to propagate the failure back to the previous choice point or to the top level
the syntax and data representation procedures for the amb evaluator and also the basic analyze procedure are identical to those in the evaluator of section four point one point seven except for the fact that we need additional syntax procedures to recognize the amb special form
we must also add to the dispatch in analyze a clause that will recognize this special form and generate an appropriate execution procedure
the top level procedure ambeval analyzes the given expression and applies the resulting execution procedure to the given environment together with two given continuations
a success continuation is a procedure of two arguments the value just obtained and another failure continuation to be used if that value leads to a subsequent failure
a failure continuation is a procedure of no arguments
so the general form of an execution procedure is
for example executing
will attempt to evaluate the given expression and will return either the expression's value or the symbol failed
the call to ambeval in the driver loop shown below uses much more complicated continuation procedures which continue the loop and support the try again request
most of the complexity of the amb evaluator results from the mechanics of passing the continuations around as the execution procedures call each other
in going through the following code you should compare each of the execution procedures with the corresponding procedure for the ordinary evaluator given in section four point one point seven
the execution procedures for the simplest kinds of expressions are essentially the same as those for the ordinary evaluator except for the need to manage the continuations
the execution procedures simply succeed with the value of the expression passing along the failure continuation that was passed to them
notice that looking up a variable always succeeds . if lookup variable value fails to find the variable it signals an error as usual
such a failure indicates a program bug a reference to an unbound variable it is not an indication that we should try another nondeterministic choice instead of the one that is currently being tried
conditionals are also handled in a similar way as in the ordinary evaluator
the execution procedure generated by analyze if invokes the predicate execution procedure pproc with a success continuation that checks whether the predicate value is true and goes on to execute either the consequent or the alternative
if the execution of pproc fails the original failure continuation for the if expression is called
sequences are also handled in the same way as in the previous evaluator except for the machinations in the subprocedure sequentially that are required for passing the continuations
namely to sequentially execute a and then b we call a with a success continuation that calls b
definitions are another case where we must go to some trouble to manage the continuations because it is necessary to evaluate the definition value expression before actually defining the new variable
to accomplish this the definition value execution procedure vproc is called with the environment a success continuation and the failure continuation
if the execution of vproc succeeds obtaining a value val for the defined variable the variable is defined and the success is propagated
assignments are more interesting
this is the first place where we really use the continuations rather than just passing them around
the execution procedure for assignments starts out like the one for definitions
it first attempts to obtain the new value to be assigned to the variable
if this evaluation of vproc fails the assignment fails
if vproc succeeds however and we go on to make the assignment we must consider the possibility that this branch of the computation might later fail which will require us to backtrack out of the assignment
thus we must arrange to undo the assignment as part of the backtracking process
this is accomplished by giving vproc a success continuation that saves the old value of the variable before assigning the new value to the variable and proceeding from the assignment
the failure continuation that is passed along with the value of the assignment restores the old value of the variable before continuing the failure
that is a successful assignment provides a failure continuation that will intercept a subsequent failure whatever failure would otherwise have called fail two calls this procedure instead to undo the assignment before actually calling fail two
the execution procedure for applications contains no new ideas except for the technical complexity of managing the continuations
this complexity arises in analyze application due to the need to keep track of the success and failure continuations as we evaluate the operands
we use a procedure get args to evaluate the list of operands rather than a simple map as in the ordinary evaluator
in get args notice how cdr ing down the list of aproc execution procedures and cons ing up the resulting list of args is accomplished by calling each aproc in the list with a success continuation that recursively calls get args
each of these recursive calls to get args has a success continuation whose value is the cons of the newly obtained argument onto the list of accumulated arguments
the actual procedure application which is performed by execute application is accomplished in the same way as for the ordinary evaluator except for the need to manage the continuations
the amb special form is the key element in the nondeterministic language
here we see the essence of the interpretation process and the reason for keeping track of the continuations
the execution procedure for amb defines a loop try next that cycles through the execution procedures for all the possible values of the amb expression
each execution procedure is called with a failure continuation that will try the next one
when there are no more alternatives to try the entire amb expression fails
the driver loop for the amb evaluator is complex due to the mechanism that permits the user to try again in evaluating an expression
the driver uses a procedure called internal loop which takes as argument a procedure try again
the intent is that calling try again should go on to the next untried alternative in the nondeterministic evaluation
internal loop either calls try again in response to the user typing try again at the driver loop or else starts a new evaluation by calling ambeval
the failure continuation for this call to ambeval informs the user that there are no more values and re invokes the driver loop
the success continuation for the call to ambeval is more subtle
we print the obtained value and then invoke the internal loop again with a try again procedure that will be able to try the next alternative
this next alternative procedure is the second argument that was passed to the success continuation
ordinarily we think of this second argument as a failure continuation to be used if the current evaluation branch later fails
in this case however we have completed a successful evaluation so we can invoke the failure alternative branch in order to search for additional successful evaluations
the initial call to internal loop uses a try again procedure that complains that there is no current problem and restarts the driver loop
this is the behavior that will happen if the user types try again when there is no evaluation in progress
implement a new special form ramb that is like amb except that it searches alternatives in a random order rather than from left to right
show how this can help with alyssa's problem in exercise four point forty nine
implement a new kind of assignment called permanent set that is not undone upon failure
for example we can choose two distinct elements from a list and count the number of trials required to make a successful choice as follows
what values would have been displayed if we had used set here rather than permanent set
implement a new construct called if fail that permits the user to catch the failure of an expression
if fail takes two expressions
it evaluates the first expression as usual and returns as usual if the evaluation succeeds
if the evaluation fails however the value of the second expression is returned as in the following example
with permanent set as described in exercise four point fifty one and if fail as in exercise four point fifty two what will be the result of evaluating
if we had not realized that require could be implemented as an ordinary procedure that uses amb to be defined by the user as part of a nondeterministic program we would have had to implement it as a special form
this would require syntax procedures
and a new clause in the dispatch in analyze
as well the procedure analyze require that handles require expressions
complete the following definition of analyze require
