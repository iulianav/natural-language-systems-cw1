well last time we began having a look at how languages are constructed
remember the main point that an evaluator for lisp say has two main elements
there's eval and eval's job is to take in an expression and an environment and turn that into a procedure and some arguments and pass that off to apply
and apply takes the procedure and the arguments turns that back into in the general case another expression to be evaluated in another environment and passes that off to eval which passes it to apply and there's this whole big circle where things go around and around and around until you get either to some very primitive data or to a primitive procedure
see what this cycle has to do with is unwinding the means of combination and the means of abstraction in the language
so for instance you have a procedure in lisp a procedure is a general way of saying i want to be able to evaluate this expression for any value of the arguments
and that's sort of what's going on here
that's what apply does
it says the general thing coming in with the arguments reduces to the expression that's the body
and then if that's a compound expression or another procedure application the thing'll go around and around this circle
anyway that that's sort of the basic structure of of gee pretty much any interpreter
the other thing that you saw is once you have the interpreter in your hands you have all this power to start playing with the language
so you can make it dynamically scoped or you can uh put in normal order evaluation or you can add new forms to the language whatever you like
or more generally there's this notion of metalinguistic abstraction which says that part of your perspective as an engineer as a software engineer but as an engineer in general is that you can gain control of complexity by inventing new languages sometimes
right see one way to think about computer programming is that it's only inci it only incidentally has to do with getting a computer to do something
primarily what a computer program has to do with it's a way of expressing ideas way of communicating ideas
and sometimes when you want to communicate new kinds of ideas you'd like to invent new modes of expressing that
well today we're going to apply this framework to build a new language
see once we have the basic idea of the interpreter you can pretty much go build any language that you like
so for example we could go off and build pascal
and uh gee we would worry about syntax and parsing and various kinds of compiler optimizations and you know there are people who make honest livings doing that
but at the at the level of abstraction that we're talking a pascal interpreter would not look very different at all from what you saw gerry do last time
instead of that we'll spend today building a really different language
right a language that that encourages you to think about programming not in terms of procedures but in a really different way
and uh the lecture today is going to be at at two levels simultaneously
on the one hand i'm going to show you what this language looks like
and on the other hand i'll show you how it's implemented and we'll build an implementation in lisp and see how that works
and you should be drawing lessons on two levels
the first is is to realize just how different a language can be
so if you think that the the jump from fortran to uh lisp is a big deal you haven't seen anything yet
and secondly you'll see that even with such a very different language which will turn out to not have procedures at all and not talk about functions at all there'll still be this basic cycle of eval and apply that unwinds the the means of combination and the means of abstraction
and then thirdly as kind of a minor but elegant technical point you'll see a nice use of streams to avoid backtracking
ok
ok well i said that this language is very different
to explain that let's go back to the very first idea that we talked about in this course and that was the idea of the distinction between the declarative knowledge of mathematics the the definition of a square root as a mathematical truth and the idea that computer science talks about the how to knowledge
contrast that definition of square root with a program to compute a square root
that's that's where we started off
well wouldn't it be great if you could somehow bridge this gap and make a programming language which sort of did things but you talked about it in in terms of truth in declarative terms
so that would be a programming language in which you specify facts
right you tell it what is
you say what is true
and then when you want an answer somehow the language has built into it automatically general kinds of how to knowledge so it can just take your facts and it can evolve these methods on its own using the facts you gave it and maybe some general rules of logic
so for instance uh i might go up to this program and start telling it some things
so i might tell it that the that the son of that the son of adam is abel
and i might tell it that the son of son of adam is cain
and i might tell it that the son of cain is enoch
and i might tell it that the son of enoch is irad
and all through the rest of of chapter whatever of genesis which ends up ending in ada by the way and this shows the the genealogy of ada from cain
anyway once you tell it these facts you might ask it things
you might go up to your language and say uh uh who's the who's the son of adam
and you can very easily imagine having a little general purpose search program which would be able to go through in response to that say oh yeah this there're two answers
the son of adam is abel and the son of adam is cain
or you might say based on the very same facts who is uh cain the son of
and then you can imagine generating another slightly different search program which would be able to go through and and check for who's who is cai cain and son of and come up with adam
or you might say uh what's what's the relationship between cain and enoch
and again a minor variant on that search program you could figure out that it said son of
but even here in this very simple example what you see is that a single fact see a single fact like the son of adam is cain can be used to answer different kinds of questions
you can say who's the cain the son of or you can say who's the who's the son of adam or you can say what's the relation between adam and cain
those are different questions being run by different traditional procedures all based on the same fact
and that's going to be the essence of the power of this programming style that one piece of declarative knowledge can be used as the basis for a lot of different kinds of how to knowledge as opposed to the kinds of procedures we're writing where you sort of tell it what input you're giving it and what answer you want
so for instance our square root program can perfectly well answer the question what's the square root of a hundred and forty four
but in principle the mathematical definition of square root tells you other things like it could say what is what is seventeen the square root of
and that would be have to answered by a different program
ok so the mathematical definition or the in general the the facts that you give it are somehow unbiased as to what what as to what the question is whereas the programs we tend to write specifically because they're how to knowledge tend to be looking for a specific answer
so that's going to be one characteristic of what we're talking about
we can go on
we can imagine that we've given our language some sort of facts
now let's give it some rules of inference
we can say for instance if the uh i'll make up some syntax here if the son of of x is y and i'll put question marks to indicate variables here if the son of x is y and the son of y is z then the grandson of x is z
so i can imagine telling telling my machine that rule and then being able to say for instance who's the grandson of adam
or who's irad the grandson of
or deduce all grandson relationships you possibly can from this information
and we can imagine somehow the language knowing how to do that automatically
ok
ok let me let me give you a maybe a little bit more concrete example
here's a here's a procedure that merges two sorted lists
so x and y are two say lists of numbers lists of distinct numbers if you like that are that are in increasing order
and what merge does is take two such lists and combine them into a list where everything's in increasing order
and uh this is a this is a a pretty easy program that you ought to be able to write
it says if x is empty the answer is y
if y is empty the answer is x
otherwise you compare the first two elements so you pick out the first thing in x and the first thing in y and then depending on which one's left on on which which of those first elements is less you stick the lower one on to the result of recursively merging either uh chopping the first one off x or chopping the first one off y
that's a standard kind of program
let's look at the the logic
let's forget about the program and look at the logic on which that procedure is based
see there's some logic which says gee if we if the first one's less then we get the answer by sticking something onto the result of recursively merging the rest
so let's try and be explicit about what that logic is that's making the program work
right so here's one piece
here's the piece of the program which recursively chops down x if the first thing in x is smaller
and if you want to be very explicit about what the logic is there what's really going on is is a deduction which says if you know that some list that we'll call cdr of x and y merge to form z and you know that a is less than the first thing in y then you know that if you put a onto the cdr of x then that result and y merge to form a onto z
and what that is that's the underlying piece of logic i haven't written it as a program i wrote it as as sort of deduction that sits that's underneath this particular clause that says we can use the recursion there
and then similar here's the other clause just to just to complete it
the other clause is based on this piece of logic which is almost almost the same and i won't go through it
and then there's the end cases where si where we tested for null and that's based on the idea that for any x x and the empty list merge to form x or for any y the empty list and y merge to form y
ok so there's there's a piece of there's a piece of per procedure and the logic on which it's based
and notice a big difference
the procedure looked like uh procedure looked like this
it said there was a box and all the pro all the things we've been doing have the characteristic we have boxes and things going in and things going out
there was this box called merge and in came an x and a y and out came an answer
that's the character of the procedure that we wrote
these rules don't look like that
these rules talk about a relation
there's some sort of relation that in those slides i called merge to form
so i said x and y merge to form z and somehow this this is not a this is a function right the answer is a function of x and y and here what i have is a relation between three things and i'm not going to specify which is the input and which is the output
and the reason i want to say that is because in principle we could use exactly those same logic rules to answer a lot of different questions
so we could say for instance giving imagine giving our machine those rules of logic
not the program the underlying rules of logic
and it ought to be able to say we we could ask it sup one three seven and two four eight merge merge to form what
and that's a question it ought to be able to answer
that's exactly the the same question that our lisp procedure answered
but the exact same rules should also be enough to be able to to answer a question like this one three seven and what merge to form one two uh three four seven eight
the same rules of logic can answer this although the procedure we wrote can't answer that question
or we might be able to say what you know what and what else uh merge to form right so here's merge to form what and what else merge to form one two three four seven eight
and the thing should be able to go through if it really can apply that logic and deduce all uh whatever it is two to the sixth answers to that question
right because it c could be one and the rest or it could be one two and the rest or it could be one and three and seven and the rest
right so there are a whole bunch of answers and in principle the logic is should be enough to deduce that
so there're going to be two big differences in the kind of program we we're going to look at and not only lisp but essentially all the programming you've probably done so far in in pretty much any language you can think of
the first is we're not going to be computing functions
right we're not going to be talking about about things that take input and output
we're going to be talking about relations
and that means in principle these relations don't have directionality
so the the knowledge that you specified to answer this question should be the same that that same knowledge should also allow you to answer these other questions and conversely
right and the second is the second issue is that since we're talking about relations these relations don't necessarily have one answer
so that third question down there doesn't have a particular answer
it has a whole bunch of answers
ok
well that's where we're going
this style of programming by the way is called logic programming kind of obvious reasons
and uh people who do logic programming say that the have this little phrase they say the point of logic programming is that you use logic you use logic to express what is true you use logic to check whether something is true and you use logic to find out what is true
ok the best known logic programming language as you probably know is called prolog
the language that we're going to we're going to implement this morning is something we call the query language and it essentially has the essence of prolog
it can do about the same stuff uh although it's a lot slower because we're going to implement it in lisp right rather than building a a particular compiler
we're going to interpret it on top of the lisp interpreter
but other than that it can do about the same stuff as prolog
it has about the same power and about the same limitations
all right let's break for questions
yes could you please repeat what the three uh things you use logic programming to find
in other words to find what is true learn what is true what was the
right the the sort of a logic programming programmer's uh little little catechism
right you use logic to to express what is true like these rules
you use logic to to check whether something is true and that's a kind of question i didn't answer here
i might say another question i could put down here is to say uh is it true that one three seven and two four eight merge to form one two six ten
and that same logic should be enough to to say n to say no
so i use logic to check what is true
and then you also use logic to find out what's true
all right let's break
ok let's go ahead and uh take a look at this query language in operation
the first thing you might notice when i put up that little biblical database is that it's nice to be able to ask this language questions in relation to some uh collection of facts
so let's let's start off and and make a little collection of facts
this is a tiny fragment of uh i don't know personnel records for a a boston high tech company
and here's a piece of the personnel record of uh ben bitdiddle
and ben ben bitdiddle is the is the computer wizard in this company
he's the uh underpaid computer wizard in this company
his supervisor is oliver warbucks and here's his address
so the format is we're giving this information job salary supervisor address and there're some other conventions
computer here means that ben works in the computer division and his position in the computer division is wizard
here's somebody else
alyssa alyssa p
hacker is a computer programmer and she works for ben and she lives in cambridge
and there's another programmer who works for ben who's lemme tweakit
and uh there's a programmer trainee who's louis reasoner and he works for alyssa
and the big wheel of the company doesn't work for anybody right that's oliver warbucks
anyway what we're going to do is is ask questions about that little world
and that'll d that'll be a sample world that we we're going to do logic in
let me just write up here for probably the last time what i said is the very most important thing you should get out of this course and that is when somebody tells you about a language you say
fine
what are the primitives what are the means of combination right how do you put the primitives together and then how do you abstract them how do you abstract the compound pieces so you can use them as pieces to make something more complicated
we've said this a whole bunch of times already but it's worth saying again
ok
let's start
the primitives
well there's really only one primitive
and the primitive in this language is called a query
all right a primitive query
let's look at some primitive queries
all right
job x who is a computer programmer
or find everybod find every fact in the database that matches job of x is computer programmer and you see a little syntax here
things without question marks are meant to be literal
question mark x means that's a variable
and this thing will match for example the fact that alyssa p
hacker is a computer programmer where x is alyssa p
hacker
ok
or more generally i could have something with two variables in it
i could say the job of x is computer something and that'll match uh computer wizard right so there's something here type will match wizard or type will match programmer or x might match various certain things
so there're well in our little example only three facts in that database that match that query
uh let's see
just to show you some syntax this same query this query doesn't match the job of x right doesn't match louis reasoner
the reason for that is when i write something here what i mean is that this is going to be a list of two symbols of which the first is the word computer and the second can be anything
and louis's job description here has three symbols so it doesn't match
and just to show you a little bit of syntax the more general thing i might want to type is a thing with a dot here and this is just standard lisp notation for saying this is a list of which the first element is the word computers and the rest is something that i'll call type
so this one would match louis's job is computer programmer trainee and type here would be the cdr of this li of this list it would be the list programmer trainee
and that kind of dot processing is done automatically by the by the lisp reader
ok
well let's actually try this
the idea is i'm going to type in queries in this language and answers will come out
so let's let's look at this
i can go up and say uh gee who works in the computer division
job of x is computer dot y
doesn't matter what i call the dummy variables
it says the answers to that and it's found four answers
hm
or i can go off and say uh tell me about everybody's supervisor
so i'll put in the query the primitive query supervisor of x is y
ok and there're there're all the supervisor relationships i know
or i could go type in uh who lives in cambridge
so i can say the address of x is cambridge dot anything
and only one person lives in cambridge
ok
ok so those are primitive queries and you see what happens
the basic interaction with the system is you type in a query and it types out all possible answers or another way to say that it finds out all the possible values of those variables x and y or t or whatever i called them and it types out all ways of taking that query and instantiating it remember that from the from the rule system lecture instantiates the query with all possible values for those variables and then types out all of them
and there are a lot of ways you can arrange a logic language
prolog for instance does something slightly different
rather than typing back your query prolog would type out x equals this and y equals that or x equals this and y equals that and that's that's a very surface level thing and you can decide what you like
ok
right so the primitives in this language only one
right
primitive query
ok
means of combination
let's look at some compound queries in this language
here's one
this one says tell me all the people who work in the computer division tell me all the people who work in the computer division together with their supervisors
and the way i write that as a query is and and the job of x is computer something or other and job of x is computer dot y and the supervisor of x is z
right tell me all the people in the computer division that's this together with their supervisors
and notice in this query i have three variables x y x y and z and this x is supposed to be the same as that x
right so x works in the computer division and the supervisor of x is z
ok let's try another one
so one means of combination is and
uh who are all the people who make more than thirty thousand dollars
right
and the salary of some person p is some amount a and when i go and look at a a is greater than thirty thousand
and lisp value here is a little piece of interface that that interfaces the query language to the underlying lisp
and what lisp val lisp value allows you to do is call any lisp predicate inside this this inside a query
so here i'm using the lisp predicate greater than so i say lisp value here i say and
so all the people whose salary is greater than thirty thousand
ok
or here's a more complicated one
tell me all the people who work in the computer division who do not have a supervisor who works in the computer division
all right
and x works in the computer division the job of x is computer dot y and it's not the case that both x has a supervisor z and the job of z is computer something or other
right so again this x has got to be that x and this z is going to be that z
and then you see another means of combination not
ok
all right
all right well let's look at that
right and it works the same way
i can go up to the machine and say uh and the job of x is computer dot y and the supervisor of x is z and i type that in like a query right and it what it types back what you see are the queries i typed in instantiated by all possible answers
and then you see there are a lot of answers
all right so the means of combination in this language and it's why it's called a logic language are are logical operations
means of combinations are things like like and and not and there's one i didn't show you which is or and then i showed you lisp value which is a not logic of course but is a little special hack to interface that to lisp so you can get more power
those are the means of combination
ok the means of abstraction
what we'd like to do let's go back and for a second look at that last slide
we might like to take a very complicated thing the idea that someone works in a division but does not have a supervisor in the division and as before name that
well if someone works in a division and does not have a supervisor who works in that division that means that person's a big shot so let's make a rule that somebody x is a big shot in some department if x works in the department right the and it's not the case that x has a supervisor who works in the department
so this is our means of abstraction
this is a rule
and a rule has three parts
right the the the thing that says it's a rule and then there's the conclusion of the rule and then there's the body of the rule
and you can read this as a piece of logic which says if you know that the body of the rule is true then you can conclude that c the conclusion is true
or in order to uh deduce that x is a big shot in some department it's enough to verify that
right so that's what rules look like
let's go back and look at the that merge example that i did before the break and let's look how that would look in terms of rules
i'm going to take the logic i put up and just change it into a bunch of rules in this format
right we have a rule remember there was this thing merge to form
there's a rule that says the empty list and y merge to form y
this is the rule conclusion
and notice this particular rule has no body
and in this language a rule with no body is something that is always true
you can always assume that's true
and there was another piece of logic that said anything and the empty list merge to form the anything and that's this right a rule y and the empty list merge to form y
those corresponded to the two end cases in our merge procedure but now we're talking about logic not about procedures
and then we had another rule which said uh if you know how how shorter things merge you can put them together
so this says if you wanted if you have lists x and y and z and if you want to deduce that a dot x this means cons of a onto x or a list whose first thing is a and whose rest is x so if you want to deduce that a dot x and b dot y merge to form b dot z right that would say you merge these two lists a x and b y and you're going to get something that starts with b
so in order to dedu you can deduce that if you know that it's the case both that a dot x and y merge to form z and a is larger than b so when i merge them b will come first in the list
and that corr that's a little translation of the logic rule that i wrote in in pseudo english before
and then just for for completeness here's the here's the other case
right a dot x and b dot y merge to form a dot z if x and b dot y merge to form z and b is larger than a
right so that's a little program that i've typed in in in this language and now let's look at it run
so i i typed in the merge rules before and i could say uh i could use this like a procedure
i could say merge to form one and three and two and seven
right so here i'm using it like the lisp procedure
and now it's going to think about that for a while and apply these rules
so it found an answer
now it's going to see if there're any other answers because it doesn't know a priori there's only one answer
so it's sitting here checking all possibilities and it says no more done
so there i've used those rules like a procedure or remember the whole point is that i can ask different kinds of questions
i could say uh merge to form let's see how about two and a some list of two elements which i know starts with two and the other thing i don't know and x and some other list merge to form uh one two three and four
and so now it's going to think about that right it's got to find right so it found one possibility
it said a could be three and x could be the list one four
and now again it's got to check because it doesn't a priori know that there aren't any other possibilities going on
ok
or like i said i could say something like merge to form like what and what else merge to form one two three four five
right now it's going to think about that
and there are a lot of answers that it might get
ok
and what you see is here you're you're really paying the price of slowness
right and kind of for three reasons
one is that this language is doubly interpreted whereas you know in a real implementation you would go compile this down to primitive operations
the other reason is that this algorithm for this particular algorithm for merge is is doubly recursive so it's going to take a very long time and uh eventually this is going to go through and find find what two to the fifth possible answers
and you see they come out in some some fairly arbitrary order depending on on which order it's going to be trying these rules
in fact what we're going to do when they edit the videotape is speed all of this up see and don't you by taking out these waits and don't you wish you could do that in your demos
yeah
anyway
anyway it's still grinding there
anyway there're thirty two possibilities and we won't wait for it to print out all of them
ok
ok so the means of abstraction in this language are rules
right so we take some bunch of things that are put together with logic and we name them and you can think of that as naming a particular pattern of logic or you can think of that as saying if you want to deduce some conclusion you can apply those rules of logic
ok and those are the the three elements of this language
let's break now and then we'll talk about how it's actually implemented
does is lisp value um primitive or whate ever interfere with your means to go both directions on a query
ok
that's a the question is does using lisp value interfere with the ability to go both directions on the query
we haven't really talked about the implementation yet but the answer is yes it can
in general as we'll see at the end i although i really won't go into details it's fairly complicated especially when you use not when you use either not or lisp value or or actually if you use anything besides only and it becomes very complicated to say wheth when these things will work
they they won't work quite in all situations
i'll talk about that at the end of the the second half today
but the answer to your question is yes
by dragging in a lot more power from lisp value you lose some of the some of the principled power of logic programming and that's a tradeoff that you have to make
ok let's take a break
