foreword
educators generals dieticians psychologists and parents program
armies students and some societies are programmed
an assault on large problems employs a succession of programs most of which spring into existence en route
these programs are rife with issues that appear to be particular to the problem at hand
to appreciate programming as an intellectual activity in its own right you must turn to computer programming you must read and write computer programs many of them
it does n't matter much what the programs are about or what applications they serve
what does matter is how well they perform and how smoothly they fit with other programs in the creation of still greater programs
the programmer must seek both perfection of part and adequacy of collection
in this book the use of program is focused on the creation execution and study of programs written in a dialect of lisp for execution on a digital computer
using lisp we restrict or limit not what we may program but only the notation for our program descriptions
our traffic with the subject matter of this book involves us with three foci of phenomena the human mind collections of computer programs and the computer
every computer program is a model hatched in the mind of a real or mental process
these processes arising from human experience and thought are huge in number intricate in detail and at any time only partially understood
they are modeled to our permanent satisfaction rarely by our computer programs
thus even though our programs are carefully handcrafted discrete collections of symbols mosaics of interlocking functions they continually evolve we change them as our perception of the model deepens enlarges generalizes until the model ultimately attains a metastable place within still another model with which we struggle
the source of the exhilaration associated with computer programming is the continual unfolding within the mind and on the computer of mechanisms expressed as programs and the explosion of perception they generate
if art interprets our dreams the computer executes them in the guise of programs
for all its power the computer is a harsh taskmaster
its programs must be correct and what we wish to say must be said accurately in every detail
as in every other symbolic activity we become convinced of program truth through argument
lisp itself can be assigned a semantics and if a program's function can be specified say in the predicate calculus the proof methods of logic can be used to make an acceptable correctness argument
unfortunately as programs get large and complicated as they almost always do the adequacy consistency and correctness of the specifications themselves become open to doubt so that complete formal arguments of correctness seldom accompany large programs
since large programs grow from small ones it is crucial that we develop an arsenal of standard program structures of whose correctness we have become sure we call them idioms and learn to combine them into larger structures using organizational techniques of proven value
these techniques are treated at length in this book and understanding them is essential to participation in the promethean enterprise called programming
more than anything else the uncovering and mastery of powerful organizational techniques accelerates our ability to create large significant programs
conversely since writing large programs is very taxing we are stimulated to invent new methods of reducing the mass of function and detail to be fitted into large programs
unlike programs computers must obey the laws of physics
if they wish to perform rapidly a few nanoseconds per state change they must transmit electrons only small distances
the heat generated by the huge number of devices so concentrated in space has to be removed
an exquisite engineering art has been developed balancing between multiplicity of function and density of devices
in any event hardware always operates at a level more primitive than that at which we care to program
the processes that transform our lisp programs to machine programs are themselves abstract models which we program
their study and creation give a great deal of insight into the organizational programs associated with programming arbitrary models
of course the computer itself can be so modeled
think of it the behavior of the smallest physical switching element is modeled by quantum mechanics described by differential equations whose detailed behavior is captured by numerical approximations represented in computer programs executing on computers composed of ...
it is not merely a matter of tactical convenience to separately identify the three foci
even though as they say it's all in the head this logical separation induces an acceleration of symbolic traffic between these foci whose richness vitality and potential is exceeded in human experience only by the evolution of life itself
at best relationships between the foci are metastable
the computers are never large enough or fast enough
each breakthrough in hardware technology leads to more massive programming enterprises new organizational principles and an enrichment of abstract models
every reader should ask himself periodically toward what end toward what end but do not ask it too often lest you pass up the fun of programming for the constipation of bittersweet philosophy
among the programs we write some perform a precise mathematical function such as sorting or finding the maximum of a sequence of numbers determining primality or finding the square root
we call such programs algorithms and a great deal is known of their optimal behavior particularly with respect to the two important parameters of execution time and data storage requirements
a programmer should acquire good algorithms and idioms
even though some programs resist precise specifications it is the responsibility of the programmer to estimate and always to attempt to improve their performance
lisp is a survivor having been in use for about a quarter of a century
among the active programming languages only fortran has had a longer life
both languages have supported the programming needs of important areas of application fortran for scientific and engineering computation and lisp for artificial intelligence
these two areas continue to be important and their programmers are so devoted to these two languages that lisp and fortran may well continue in active use for at least another quarter century
lisp changes
the scheme dialect used in this text has evolved from the original lisp and differs from the latter in several important ways including static scoping for variable binding and permitting functions to yield functions as values
in its semantic structure scheme is as closely akin to algol sixty as to early lisps
algol sixty never to be an active language again lives on in the genes of scheme and pascal
it would be difficult to find two languages that are the communicating coin of two more different cultures than those gathered around these two languages
pascal is for building pyramids imposing breathtaking static structures built by armies pushing heavy blocks into place
lisp is for building organisms imposing breathtaking dynamic structures built by squads fitting fluctuating myriads of simpler organisms into place
the organizing principles used are the same in both cases except for one extraordinarily important difference the discretionary exportable functionality entrusted to the individual lisp programmer is more than an order of magnitude greater than that to be found within pascal enterprises
lisp programs inflate libraries with functions whose utility transcends the application that produced them
the list lisp's native data structure is largely responsible for such growth of utility
the simple structure and natural applicability of lists are reflected in functions that are amazingly nonidiosyncratic
in pascal the plethora of declarable data structures induces a specialization within functions that inhibits and penalizes casual cooperation
it is better to have one hundred functions operate on one data structure than to have ten functions operate on ten data structures
as a result the pyramid must stand unchanged for a millennium the organism must evolve or perish
to illustrate this difference compare the treatment of material and exercises within this book with that in any first course text using pascal
do not labor under the illusion that this is a text digestible at mit only peculiar to the breed found there
it is precisely what a serious book on programming lisp must be no matter who the student is or where it is used
note that this is a text about programming unlike most lisp books which are used as a preparation for work in artificial intelligence
after all the critical programming concerns of software engineering and artificial intelligence tend to coalesce as the systems under investigation become larger
this explains why there is such growing interest in lisp outside of artificial intelligence
as one would expect from its goals artificial intelligence research generates many significant programming problems
in other programming cultures this spate of problems spawns new languages
indeed in any very large programming task a useful organizing principle is to control and isolate traffic within the task modules via the invention of language
these languages tend to become less primitive as one approaches the boundaries of the system where we humans interact most often
as a result such systems contain complex language processing functions replicated many times
lisp has such a simple syntax and semantics that parsing can be treated as an elementary task
thus parsing technology plays almost no role in lisp programs and the construction of language processors is rarely an impediment to the rate of growth and change of large lisp systems
finally it is this very simplicity of syntax and semantics that is responsible for the burden and freedom borne by all lisp programmers
no lisp program of any size beyond a few lines can be written without being saturated with discretionary functions
invent and fit have fits and reinvent we toast the lisp programmer who pens his thoughts within nests of parentheses
