computing with register machines
we began this book by studying processes and by describing processes in terms of procedures written in lisp
to explain the meanings of these procedures we used a succession of models of evaluation the substitution model of chapter one the environment model of chapter three and the metacircular evaluator of chapter four
our examination of the metacircular evaluator in particular dispelled much of the mystery of how lisp like languages are interpreted
but even the metacircular evaluator leaves important questions unanswered because it fails to elucidate the mechanisms of control in a lisp system
for instance the evaluator does not explain how the evaluation of a subexpression manages to return a value to the expression that uses this value nor does the evaluator explain how some recursive procedures generate iterative processes whereas other recursive procedures generate recursive processes
these questions remain unanswered because the metacircular evaluator is itself a lisp program and hence inherits the control structure of the underlying lisp system
in order to provide a more complete description of the control structure of the lisp evaluator we must work at a more primitive level than lisp itself
in this chapter we will describe processes in terms of the step by step operation of a traditional computer
such a computer or register machine sequentially executes instructions that manipulate the contents of a fixed set of storage elements called registers
a typical register machine instruction applies a primitive operation to the contents of some registers and assigns the result to another register
our descriptions of processes executed by register machines will look very much like machine language programs for traditional computers
however instead of focusing on the machine language of any particular computer we will examine several lisp procedures and design a specific register machine to execute each procedure
thus we will approach our task from the perspective of a hardware architect rather than that of a machine language computer programmer
in designing register machines we will develop mechanisms for implementing important programming constructs such as recursion
we will also present a language for describing designs for register machines
in section five point two we will implement a lisp program that uses these descriptions to simulate the machines we design
most of the primitive operations of our register machines are very simple
for example an operation might add the numbers fetched from two registers producing a result to be stored into a third register
such an operation can be performed by easily described hardware
in order to deal with list structure however we will also use the memory operations car cdr and cons which require an elaborate storage allocation mechanism
in section five point three we study their implementation in terms of more elementary operations
in section five point four after we have accumulated experience formulating simple procedures as register machines we will design a machine that carries out the algorithm described by the metacircular evaluator of section four point one
this will fill in the gap in our understanding of how scheme expressions are interpreted by providing an explicit model for the mechanisms of control in the evaluator
in section five point five we will study a simple compiler that translates scheme programs into sequences of instructions that can be executed directly with the registers and operations of the evaluator register machine
