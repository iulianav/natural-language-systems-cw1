we have seen that procedures are in effect abstractions that describe compound operations on numbers independent of the particular numbers
for example when we
we are not talking about the cube of a particular number but rather about a method for obtaining the cube of any number
of course we could get along without ever defining this procedure by always writing expressions such as
and never mentioning cube explicitly
this would place us at a serious disadvantage forcing us to work always at the level of the particular operations that happen to be primitives in the language rather than in terms of higher level operations
our programs would be able to compute cubes but our language would lack the ability to express the concept of cubing
one of the things we should demand from a powerful programming language is the ability to build abstractions by assigning names to common patterns and then to work in terms of the abstractions directly
procedures provide this ability
this is why all but the most primitive programming languages include mechanisms for defining procedures
yet even in numerical processing we will be severely limited in our ability to create abstractions if we are restricted to procedures whose parameters must be numbers
often the same programming pattern will be used with a number of different procedures
to express such patterns as concepts we will need to construct procedures that can accept procedures as arguments or return procedures as values
procedures that manipulate procedures are called higher order procedures
this section shows how higher order procedures can serve as powerful abstraction mechanisms vastly increasing the expressive power of our language
consider the following three procedures
the first computes the sum of the integers from a through b
the second computes the sum of the cubes of the integers in the given range
the third computes the sum of a sequence of terms in the series
which converges to / eight
these three procedures clearly share a common underlying pattern
they are for the most part identical differing only in the name of the procedure the function of a used to compute the term to be added and the function that provides the next value of a
we could generate each of the procedures by filling in slots in the same template
the presence of such a common pattern is strong evidence that there is a useful abstraction waiting to be brought to the surface
indeed mathematicians long ago identified the abstraction of summation of a series and invented sigma notation for example
to express this concept
the power of sigma notation is that it allows mathematicians to deal with the concept of summation itself rather than only with particular sums for example to formulate general results about sums that are independent of the particular series being summed
similarly as program designers we would like our language to be powerful enough so that we can write a procedure that expresses the concept of summation itself rather than only procedures that compute particular sums
we can do so readily in our procedural language by taking the common template shown above and transforming the slots into formal parameters
notice that sum takes as its arguments the lower and upper bounds a and b together with the procedures term and next
we can use sum just as we would any procedure
for example we can use it to define sum cubes
using this we can compute the sum of the cubes of the integers from one to ten
with the aid of an identity procedure to compute the term we can define sum integers in terms of sum
then we can add up the integers from one to ten
we can also define pi sum in the same way
using these procedures we can compute an approximation to
once we have sum we can use it as a building block in formulating further concepts
for instance the definite integral of a function f between the limits a and b can be approximated numerically using the formula
for small values of dx
we can express this directly as a procedure
simpson's rule is a more accurate method of numerical integration than the method illustrated above
using simpson's rule the integral of a function f between a and b is approximated as
where h equal / n for some even integer n and yk equal f
define a procedure that takes as arguments f a b and n and returns the value of the integral computed using simpson's rule
use your procedure to integrate cube between 0 and one and compare the results to those of the integral procedure shown above
the sum procedure above generates a linear recursion
the procedure can be rewritten so that the sum is performed iteratively
show how to do this by filling in the missing expressions in the following definition
a
the sum procedure is only the simplest of a vast number of similar abstractions that can be captured as higher order procedures
write an analogous procedure called product that returns the product of the values of a function at points over a given range
show how to define factorial in terms of product
also use product to compute approximations to using the formula
b
if your product procedure generates a recursive process write one that generates an iterative process
if it generates an iterative process write one that generates a recursive process
a
show that sum and product are both special cases of a still more general notion called accumulate that combines a collection of terms using some general accumulation function
accumulate takes as arguments the same term and range specifications as sum and product together with a combiner procedure that specifies how the current term is to be combined with the accumulation of the preceding terms and a null value that specifies what base value to use when the terms run out
write accumulate and show how sum and product can both be defined as simple calls to accumulate
b
if your accumulate procedure generates a recursive process write one that generates an iterative process
if it generates an iterative process write one that generates a recursive process
you can obtain an even more general version of accumulate by introducing the notion of a filter on the terms to be combined
that is combine only those terms derived from values in the range that satisfy a specified condition
the resulting filtered accumulate abstraction takes the same arguments as accumulate together with an additional predicate of one argument that specifies the filter
write filtered accumulate as a procedure
show how to express the following using filtered accumulate
a
the sum of the squares of the prime numbers in the interval a to b
b
the product of all the positive integers less than n that are relatively prime to n
in using sum as in section one point three point one it seems terribly awkward to have to define trivial procedures such as pi term and pi next just so we can use them as arguments to our higher order procedure
rather than define pi next and pi term it would be more convenient to have a way to directly specify the procedure that returns its input incremented by four and the procedure that returns the reciprocal of its input times its input plus two . we can do this by introducing the special form lambda which creates procedures
using lambda we can describe what we want as
and
then our pi sum procedure can be expressed without defining any auxiliary procedures as
again using lambda we can write the integral procedure without having to define the auxiliary procedure add dx
in general lambda is used to create procedures in the same way as define except that no name is specified for the procedure
the resulting procedure is just as much a procedure as one that is created using define
the only difference is that it has not been associated with any name in the environment
in fact
is equivalent to
we can read a lambda expression as follows
like any expression that has a procedure as its value a lambda expression can be used as the operator in a combination such as
or more generally in any context where we would normally use a procedure name
another use of lambda is in creating local variables
we often need local variables in our procedures other than those that have been bound as formal parameters
for example suppose we wish to compute the function
which we could also express as
in writing a procedure to compute f we would like to include as local variables not only x and y but also the names of intermediate quantities like a and b
one way to accomplish this is to use an auxiliary procedure to bind the local variables
of course we could use a lambda expression to specify an anonymous procedure for binding our local variables
the body of f then becomes a single call to that procedure
this construct is so useful that there is a special form called let to make its use more convenient
using let the f procedure could be written as
the general form of a let expression is
which can be thought of as saying
let var one have the value exp one and
var two have the value exp two and
varn have the value expn
in body
the first part of the let expression is a list of name expression pairs
when the let is evaluated each name is associated with the value of the corresponding expression
the body of the let is evaluated with these names bound as local variables
the way this happens is that the let expression is interpreted as an alternate syntax for
no new mechanism is required in the interpreter in order to provide local variables
a let expression is simply syntactic sugar for the underlying lambda application
we can see from this equivalence that the scope of a variable specified by a let expression is the body of the let
this implies that
let allows one to bind variables as locally as possible to where they are to be used
for example if the value of x is five the value of the expression
is thirty eight
here the x in the body of the let is three so the value of the let expression is thirty three
on the other hand the x that is the second argument to the outermost plus is still five
the variables' values are computed outside the let
this matters when the expressions that provide the values for the local variables depend upon variables having the same names as the local variables themselves
for example if the value of x is two the expression
will have the value twelve because inside the body of the let x will be three and y will be four
sometimes we can use internal definitions to get the same effect as with let
for example we could have defined the procedure f above as
we prefer however to use let in situations like this and to use internal define only for internal procedures
suppose we define the procedure
then we have
what happens if we ( perversely ) ask the interpreter to evaluate the combination
explain
we introduced compound procedures in section one point one point four as a mechanism for abstracting patterns of numerical operations so as to make them independent of the particular numbers involved
with higher order procedures such as the integral procedure of section one point three point one we began to see a more powerful kind of abstraction procedures used to express general methods of computation independent of the particular functions involved
in this section we discuss two more elaborate examples general methods for finding zeros and fixed points of functions and show how these methods can be expressed directly as procedures
the half interval method is a simple but powerful technique for finding roots of an equation f ( x ) equal 0 where f is a continuous function
the idea is that if we are given points a and b such that f ( a ) < 0 < f ( b ) then f must have at least one zero between a and b
to locate a zero let x be the average of a and b and compute f ( x )
if f ( x ) > 0 then f must have a zero between a and x
if f ( x ) < 0 then f must have a zero between x and b
continuing in this way we can identify smaller and smaller intervals on which f must have a zero
when we reach a point where the interval is small enough the process stops
since the interval of uncertainty is reduced by half at each step of the process the number of steps required grows as where l is the length of the original interval and t is the error tolerance
here is a procedure that implements this strategy
we assume that we are initially given the function f together with points at which its values are negative and positive
we first compute the midpoint of the two given points
next we check to see if the given interval is small enough and if so we simply return the midpoint as our answer
otherwise we compute as a test value the value of f at the midpoint
if the test value is positive then we continue the process with a new interval running from the original negative point to the midpoint
if the test value is negative we continue with the interval from the midpoint to the positive point
finally there is the possibility that the test value is 0 in which case the midpoint is itself the root we are searching for
to test whether the endpoints are close enough we can use a procedure similar to the one used in section one point one point seven for computing square roots
search is awkward to use directly because we can accidentally give it points at which f's values do not have the required sign in which case we get a wrong answer
instead we will use search via the following procedure which checks to see which of the endpoints has a negative function value and which has a positive value and calls the search procedure accordingly
if the function has the same sign on the two given points the half interval method cannot be used in which case the procedure signals an error
the following example uses the half interval method to approximate as the root between two and four of sin x equal 0
here is another example using the half interval method to search for a root of the equation x three minus 2x minus three equal 0 between one and two
a number x is called a fixed point of a function f if x satisfies the equation f ( x ) equal x
for some functions f we can locate a fixed point by beginning with an initial guess and applying f repeatedly
until the value does not change very much
using this idea we can devise a procedure fixed point that takes as inputs a function and an initial guess and produces an approximation to a fixed point of the function
we apply the function repeatedly until we find two successive values whose difference is less than some prescribed tolerance
for example we can use this method to approximate the fixed point of the cosine function starting with one as an initial approximation
similarly we can find a solution to the equation y equal sin y plus cos y
the fixed point process is reminiscent of the process we used for finding square roots in section one point one point seven
both are based on the idea of repeatedly improving a guess until the result satisfies some criterion
in fact we can readily formulate the square root computation as a fixed point search
computing the square root of some number x requires finding a y such that y two equal x
putting this equation into the equivalent form y equal x / y we recognize that we are looking for a fixed point of the function y x / y and we can therefore try to compute square roots as
unfortunately this fixed point search does not converge
consider an initial guess y one
the next guess is y two equal x / y one and the next guess is y three equal x / y two equal x / ( x / y one ) equal y one
this results in an infinite loop in which the two guesses y one and y two repeat over and over oscillating about the answer
one way to control such oscillations is to prevent the guesses from changing so much
since the answer is always between our guess y and x / y we can make a new guess that is not as far from y as x / y by averaging y with x / y so that the next guess after y is ( one / two ) instead of x / y
the process of making such a sequence of guesses is simply the process of looking for a fixed point of y ( one / two )
with this modification the square root procedure works
in fact if we unravel the definitions we can see that the sequence of approximations to the square root generated here is precisely the same as the one generated by our original square root procedure of section one point one point seven
this approach of averaging successive approximations to a solution a technique we that we call average damping often aids the convergence of fixed point searches
show that the golden ratio is a fixed point of the transformation x one plus one / x and use this fact to compute by means of the fixed point procedure
modify fixed point so that it prints the sequence of approximations it generates using the newline and display primitives shown in exercise one point twenty two
then find a solution to xx equal 1000 by finding a fixed point of x log ( 1000 ) / log ( x )
compare the number of steps this takes with and without average damping
a
an infinite continued fraction is an expression of the form
as an example one can show that the infinite continued fraction expansion with the ni and the di all equal to one produces one / where is the golden ratio
one way to approximate an infinite continued fraction is to truncate the expansion after a given number of terms
such a truncation a so called k term finite continued fraction has the form
suppose that n and d are procedures of one argument that return the ni and di of the terms of the continued fraction
define a procedure cont frac such that evaluating computes the value of the k term finite continued fraction
check your procedure by approximating one / using
for successive values of k
how large must you make k in order to get an approximation that is accurate to four decimal places
b
if your cont frac procedure generates a recursive process write one that generates an iterative process
if it generates an iterative process write one that generates a recursive process
in 1737 the swiss mathematician leonhard euler published a memoir de fractionibus continuis which included a continued fraction expansion for e minus two where e is the base of the natural logarithms
in this fraction the ni are all one and the di are successively one two one 1 four one 1 six one 1 eight ...
write a program that uses your cont frac procedure from exercise one point thirty seven to approximate e based on euler's expansion
a continued fraction representation of the tangent function was published in 1770 by the german mathematician j.h
lambert
where x is in radians
define a procedure that computes an approximation to the tangent function based on lambert's formula
k specifies the number of terms to compute as in exercise one point thirty seven
the above examples demonstrate how the ability to pass procedures as arguments significantly enhances the expressive power of our programming language
we can achieve even more expressive power by creating procedures whose returned values are themselves procedures
we can illustrate this idea by looking again at the fixed point example described at the end of section one point three point three
we formulated a new version of the square root procedure as a fixed point search starting with the observation that x is a fixed point of the function y x / y
then we used average damping to make the approximations converge
average damping is a useful general technique in itself
namely given a function f we consider the function whose value at x is equal to the average of x and f ( x )
we can express the idea of average damping by means of the following procedure
average damp is a procedure that takes as its argument a procedure f and returns as its value a procedure that when applied to a number x produces the average of x and
for example applying average damp to the square procedure produces a procedure whose value at some number x is the average of x and x two
applying this resulting procedure to ten returns the average of ten and one hundred or fifty five
using average damp we can reformulate the square root procedure as follows
notice how this formulation makes explicit the three ideas in the method fixed point search average damping and the function y x / y
it is instructive to compare this formulation of the square root method with the original version given in section one point one point seven
bear in mind that these procedures express the same process and notice how much clearer the idea becomes when we express the process in terms of these abstractions
in general there are many ways to formulate a process as a procedure
experienced programmers know how to choose procedural formulations that are particularly perspicuous and where useful elements of the process are exposed as separate entities that can be reused in other applications
as a simple example of reuse notice that the cube root of x is a fixed point of the function y x / y two so we can immediately generalize our square root procedure to one that extracts cube roots
when we first introduced the square root procedure in section one point one point seven we mentioned that this was a special case of newton's method
if x g ( x ) is a differentiable function then a solution of the equation g ( x ) equal 0 is a fixed point of the function x f ( x ) where
and dg ( x ) is the derivative of g evaluated at x
newton's method is the use of the fixed point method we saw above to approximate a solution of the equation by finding a fixed point of the function f
for many functions g and for sufficiently good initial guesses for x newton's method converges very rapidly to a solution of g ( x ) equal 0
in order to implement newton's method as a procedure we must first express the idea of derivative
note that derivative like average damping is something that transforms a function into another function
for instance the derivative of the function x x three is the function x 3x2
in general if g is a function and dx is a small number then the derivative dg of g is the function whose value at any number x is given by
thus we can express the idea of derivative as the procedure
along with the definition
like average damp deriv is a procedure that takes a procedure as argument and returns a procedure as value
for example to approximate the derivative of x x three at five we can evaluate
with the aid of deriv we can express newton's method as a fixed point process
the newton transform procedure expresses the formula at the beginning of this section and newtons method is readily defined in terms of this
it takes as arguments a procedure that computes the function for which we want to find a zero together with an initial guess
for instance to find the square root of x we can use newton's method to find a zero of the function y y two minus x starting with an initial guess of one
this provides yet another form of the square root procedure
we've seen two ways to express the square root computation as an instance of a more general method once as a fixed point search and once using newton's method
since newton's method was itself expressed as a fixed point process we actually saw two ways to compute square roots as fixed points
each method begins with a function and finds a fixed point of some transformation of the function
we can express this general idea itself as a procedure
this very general procedure takes as its arguments a procedure g that computes some function a procedure that transforms g and an initial guess
the returned result is a fixed point of the transformed function
using this abstraction we can recast the first square root computation from this section as an instance of this general method
similarly we can express the second square root computation from this section as
we began section one point three with the observation that compound procedures are a crucial abstraction mechanism because they permit us to express general methods of computing as explicit elements in our programming language
now we've seen how higher order procedures permit us to manipulate these general methods to create further abstractions
as programmers we should be alert to opportunities to identify the underlying abstractions in our programs and to build upon them and generalize them to create more powerful abstractions
this is not to say that one should always write programs in the most abstract way possible expert programmers know how to choose the level of abstraction appropriate to their task
but it is important to be able to think in terms of these abstractions so that we can be ready to apply them in new contexts
the significance of higher order procedures is that they enable us to represent these abstractions explicitly as elements in our programming language so that they can be handled just like other computational elements
in general programming languages impose restrictions on the ways in which computational elements can be manipulated
elements with the fewest restrictions are said to have first class status
some of the rights and privileges of first class elements are
they may be named by variables
they may be passed as arguments to procedures
they may be returned as the results of procedures
they may be included in data structures
lisp unlike other common programming languages awards procedures full first class status
this poses challenges for efficient implementation but the resulting gain in expressive power is enormous
define a procedure cubic that can be used together with the newtons method procedure in expressions of the form
to approximate zeros of the cubic x three plus ax two plus bx plus c
define a procedure double that takes a procedure of one argument as argument and returns a procedure that applies the original procedure twice
for example if inc is a procedure that adds one to its argument then should be a procedure that adds two
what value is returned by
let f and g be two one argument functions
the composition f after g is defined to be the function x f
define a procedure compose that implements composition
for example if inc is a procedure that adds one to its argument
if f is a numerical function and n is a positive integer then we can form the nth repeated application of f which is defined to be the function whose value at x is f
for example if f is the function x x plus one then the nth repeated application of f is the function x x plus n
if f is the operation of squaring a number then the nth repeated application of f is the function that raises its argument to the 2nth power
write a procedure that takes as inputs a procedure that computes f and a positive integer n and returns the procedure that computes the nth repeated application of f
your procedure should be able to be used as follows
hint you may find it convenient to use compose from exercise one point forty two
the idea of smoothing a function is an important concept in signal processing
if f is a function and dx is some small number then the smoothed version of f is the function whose value at a point x is the average of f f ( x ) and f
write a procedure smooth that takes as input a procedure that computes f and returns a procedure that computes the smoothed f
it is sometimes valuable to repeatedly smooth a function to obtained the n fold smoothed function
show how to generate the n fold smoothed function of any given function using smooth and repeated from exercise one point forty three
we saw in section one point three point three that attempting to compute square roots by naively finding a fixed point of y x / y does not converge and that this can be fixed by average damping
the same method works for finding cube roots as fixed points of the average damped y x / y two
unfortunately the process does not work for fourth roots a single average damp is not enough to make a fixed point search for y x / y three converge
on the other hand if we average damp twice the fixed point search does converge
do some experiments to determine how many average damps are required to compute nth roots as a fixed point search based upon repeated average damping of y x / yn one
use this to implement a simple procedure for computing nth roots using fixed point average damp and the repeated procedure of exercise one point forty three
assume that any arithmetic operations you need are available as primitives
several of the numerical methods described in this chapter are instances of an extremely general computational strategy known as iterative improvement
iterative improvement says that to compute something we start with an initial guess for the answer test if the guess is good enough and otherwise improve the guess and continue the process using the improved guess as the new guess
write a procedure iterative improve that takes two procedures as arguments a method for telling whether a guess is good enough and a method for improving a guess
iterative improve should return as its value a procedure that takes a guess as argument and keeps improving the guess until it is good enough
rewrite the sqrt procedure of section one point one point seven and the fixed point procedure of section one point three point three in terms of iterative improve
